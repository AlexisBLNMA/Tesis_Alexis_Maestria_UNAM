# -*- coding: utf-8 -*-
"""Analisis_Wilcoxon_And_Kruskal-Wallis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s9oK0QjxVq2naj_U9CAgPRLTYzqLTy9o
"""

#10 Verde
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#50 Verde
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#250 Verde
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#10 Rojo
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#50 Rojo
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#250 Rojo
# Importa las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Solicita los datos experimentales
datos_experimentales_str = input("Introduce los datos experimentales, separados por comas: ")

# Convierte los datos experimentales a una lista de números
datos_experimentales = np.array([float(i) for i in datos_experimentales_str.split(',')])

# Calcula la desviación estándar de los datos experimentales
std_experimentales = np.std(datos_experimentales)

# Genera los datos simulados con una media de 1 y la desviación estándar del set experimental
datos_simulados = np.random.normal(1, std_experimentales, len(datos_experimentales))

# Realiza la prueba no paramétrica de Mann-Whitney U
stat, p_value = stats.mannwhitneyu(datos_experimentales, datos_simulados)

# Muestra los resultados
print(f'Estadístico de Mann-Whitney U: {stat}')
print(f'Valor p: {p_value}')

# Evalúa la significancia en términos de asteriscos
alpha = 0.05  # Nivel de significancia
if p_value < 0.0001:
    significancia = "**** (p < 0.0001)"
elif p_value < 0.001:
    significancia = "*** (p < 0.001)"
elif p_value < 0.01:
    significancia = "** (p < 0.01)"
elif p_value < 0.05:
    significancia = "* (p < 0.05)"
else:
    significancia = "ns (no significativa)"

# Muestra los asteriscos correspondientes
print(f'Significancia: {significancia}')

# Verifica si es significativo o no
if p_value < alpha:
    print("La diferencia entre los datos experimentales y simulados es estadísticamente significativa (rechaza H0).")
else:
    print("No hay evidencia suficiente para rechazar H0 (diferencia no significativa).")

#Kruskal-Wallis
#Verde

# Importamos las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Función para ingresar los datos de cada grupo en formato de lista
def input_data():
    while True:
        values = input("Ingresa los valores para el grupo, separados por comas: ")
        try:
            # Convertir la entrada en un array de numpy
            group = np.array([float(value.strip()) for value in values.split(',')])
            return group
        except ValueError:
            print("Por favor, ingresa valores numéricos válidos separados por comas.")

# Ingresamos los datos para los tres grupos
print("Introduce los datos del Grupo 1:")
group1 = input_data()

print("\nIntroduce los datos del Grupo 2:")
group2 = input_data()

print("\nIntroduce los datos del Grupo 3:")
group3 = input_data()

# Comparaciones entre grupos usando la prueba de Mann-Whitney U
comparisons = [
    ("Grupo 1", "Grupo 2", stats.mannwhitneyu(group1, group2, alternative='two-sided')),
    ("Grupo 1", "Grupo 3", stats.mannwhitneyu(group1, group3, alternative='two-sided')),
    ("Grupo 2", "Grupo 3", stats.mannwhitneyu(group2, group3, alternative='two-sided'))
]

# Imprimimos los resultados de cada comparación
print("\nResultados de las comparaciones:")
for group1_name, group2_name, (stat, p_value) in comparisons:
    # Asignar significancia basada en el valor p
    if p_value < 0.001:
        significance = '***'
    elif p_value < 0.01:
        significance = '**'
    elif p_value < 0.05:
        significance = '*'
    else:
        significance = ''

    print(f"{group1_name} vs {group2_name} - Estadístico: {stat}, p-valor: {p_value}, Significancia: {significance}")

#Kruskal-Wallis
#Rojo

# Importamos las bibliotecas necesarias
import numpy as np
import scipy.stats as stats

# Función para ingresar los datos de cada grupo en formato de lista
def input_data():
    while True:
        values = input("Ingresa los valores para el grupo, separados por comas: ")
        try:
            # Convertir la entrada en un array de numpy
            group = np.array([float(value.strip()) for value in values.split(',')])
            return group
        except ValueError:
            print("Por favor, ingresa valores numéricos válidos separados por comas.")

# Ingresamos los datos para los tres grupos
print("Introduce los datos del Grupo 1:")
group1 = input_data()

print("\nIntroduce los datos del Grupo 2:")
group2 = input_data()

print("\nIntroduce los datos del Grupo 3:")
group3 = input_data()

# Comparaciones entre grupos usando la prueba de Mann-Whitney U
comparisons = [
    ("Grupo 1", "Grupo 2", stats.mannwhitneyu(group1, group2, alternative='two-sided')),
    ("Grupo 1", "Grupo 3", stats.mannwhitneyu(group1, group3, alternative='two-sided')),
    ("Grupo 2", "Grupo 3", stats.mannwhitneyu(group2, group3, alternative='two-sided'))
]

# Imprimimos los resultados de cada comparación
print("\nResultados de las comparaciones:")
for group1_name, group2_name, (stat, p_value) in comparisons:
    # Asignar significancia basada en el valor p
    if p_value < 0.001:
        significance = '***'
    elif p_value < 0.01:
        significance = '**'
    elif p_value < 0.05:
        significance = '*'
    else:
        significance = 'ns'

    print(f"{group1_name} vs {group2_name} - Estadístico: {stat}, p-valor: {p_value}, Significancia: {significance}")